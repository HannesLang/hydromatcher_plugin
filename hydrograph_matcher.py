# -*- coding: utf-8 -*-
"""
/***************************************************************************
 HydrographMatcher
                                 A QGIS plugin
 This plugin searches the best match for a given hydrograph
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-11-16
        git sha              : $Format:%H$
        copyright            : (C) 2018 by MobiliarLab Giub Unibe
        email                : johannes.lang@giub.unibe.ch
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
from PyQt5.QtCore import *
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QToolBar, QProgressBar
from qgis.core import QgsDataSourceUri
from qgis.core import Qgis
from .confighelper import ConfigHelper

from .abstractlogger import AbstractLogger
from .worker import Worker
from .mergeprocessor import MergeProcessor
from .processinghelper import ProcessingHelper
from .geojson_exporter_worker import GeoJsonExportWorker

# Initialize Qt resources from file resources.py
# Import the code for the dialog
from .hydrograph_matcher_dialog import HydrographMatcherDialog


class HydrographMatcher:
    """QGIS Plugin Implementation."""

    thread = None
    worker = None
    progress = None
    progressMessageBar = None
    generalproperties = None
    dbproperties = None
    logger = None

    def __init__(self, iface, logger: AbstractLogger):
        """Constructor.

        :param iface: An interface instance that will be passed to this class which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        self.locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'HydrographMatcher_{}.qm'.format(self.locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # initialize the properties
        self.generalproperties = self.config(filename='properties.ini', section='general')
        self.dbproperties = self.config(filename='database.ini', section=self.generalproperties.get('db'))

        # Create the dialog (after translation) and keep reference
        self.dlg = HydrographMatcherDialog(self.iface, self.generalproperties)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Hydrograph Matcher')
        self.messageBar = self.iface.messageBar()
        self.logger = logger

    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('HydrographMatcher', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            parent.findChildren(QToolBar, 'mPluginToolBar')[0].addAction(action)
            # self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = self.plugin_dir + '/hydromatcher.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Search Best Match for Hydrograph ...'),
            callback=self.run,
            parent=self.iface.mainWindow())

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Hydrograph Matcher'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        # del self.toolbar

    def run(self):
        """ The method that performs all the real work """

        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()

        # See if OK was pressed
        if result:

            # write the values of the ui back to the sectionproxy
            self.generalproperties.__setitem__('dissolve_merged_shapes', str(self.dlg.checkBoxDissolveShapes.isChecked()))
            self.generalproperties.__setitem__('merge_async', str(self.dlg.checkBoxMergeAsync.isChecked()))
            self.generalproperties.__setitem__('export_geojson', str(self.dlg.checkBoxExportGeoJson.isChecked()))

            if len(self.dlg.filenames) > 0:

                self.progressMessageBar = self.messageBar.createMessage("Start processing ...")
                self.progress = QProgressBar()
                self.progress.setRange(0, 0)
                self.progress.setAlignment(Qt.AlignLeft | Qt.AlignVCenter)
                self.progressMessageBar.layout().addWidget(self.progress)
                self.messageBar.pushWidget(self.progressMessageBar, Qgis.Info)

                shapenames = []
                for filename in self.dlg.filenames:
                    filename = ProcessingHelper.replacebackslashes(filename)
                    dataframe_forecast = ProcessingHelper.getDataFrameForFile(self, filename)

                    self.logger.info("filename {}".format(filename))
                    floodplain_name = ProcessingHelper.getfloodplainNameFromFilename(filename)

                    # Determine Interpolation function for infile and calculate max Q from infile and Volume from interpol-func
                    qvol, err = ProcessingHelper.getVolume(dataframe_forecast)
                    qmax = dataframe_forecast['q'].max()
                    self.logger.info("Floodplain: {0}; Input-Hydrograph: Q [m3]: {1:n}; Qmax [m3/s]: {2:n}".format(floodplain_name, int(round(qvol)), qmax))

                    # match hydrograph from infile to SDH's via Qmax and Volume
                    # grab matching shapefile from postgis-database and display it
                    shapenames.append(ProcessingHelper.getmatchingshapefromdb(self, qmax, qvol, floodplain_name, self.dbproperties, self.logger))

                # remove None values from shapenames. They can be there because of qmax_forecast < lowest qmax_dsh
                self.displayshapes(list(filter(None.__ne__, shapenames)))
                # reset the primary dialog
                self.dlg.filenames.clear()
                self.dlg.fileCountValueLabel.setText('0')

    def displayshapes(self, shapenames):
        """
        Display the resulting merged shapefile
        :param shapenames: list of shapenames to display
        """

        if len(shapenames) == 1:
            tablename = shapenames[0]
        elif len(shapenames) > 1:
            if self.generalproperties.getboolean('merge_async'):
                self.mergeshapesasync(self.dbproperties, self.generalproperties, shapenames)
            else:
                tablename = self.mergeshapes(self.dbproperties, self.generalproperties, shapenames)
                uri = self.get_datasource_uri_for_shapefile(self.dbproperties, tablename)
                self.addNewLayer(tablename, uri)
                self.setprogressfinished()
                self.hideprogressbar_delayed()
        else:
            self.logger.error('No shapenames found. Datasource uri cannot be defined.')
            raise Exception('No shapenames found. Datasource uri cannot be defined.')

    def addNewLayer(self, tablename, uri):
        # for the displayname remove the first part of the name which is 't_'
        floodlayer = self.iface.addVectorLayer(uri.uri(False), ''.join(tablename.split('_')[1:]), "postgres")
        stylepath = self.getStyle()
        self.logger.info('stylepath: ' + stylepath)
        floodlayer.loadNamedStyle(stylepath)
        floodlayer.triggerRepaint()
        self.iface.layerTreeView().refreshLayerSymbology(floodlayer.id())
        return floodlayer

    def hideprogressbar(self):
        self.messageBar.popWidget(self.progressMessageBar)

    def hideprogressbar_delayed(self):
        timer = QTimer()
        timer.singleShot(5000, self.hideprogressbar)

    def getStyle(self):
        return os.path.join(self.plugin_dir, 'style') + '/floodlayer_defaultstyle.qml'

    def workerFinished(self, ret):
        """ callback for worker thread when finished """
        self.worker.deleteLater()
        self.thread.quit()
        self.thread.wait()
        self.thread.deleteLater()
        if ret is not None:
            self.progressMessageBar.setText('Merging finished')
            uri = self.get_datasource_uri_for_shapefile(self.dbproperties, ret)
            layer = self.addNewLayer(ret, uri)
            if self.generalproperties.getboolean('export_geojson') and self.dlg.geojsonexportfilename:
                self.shp2geojson(layer, self.dlg.geojsonexportfilename)
            self.setprogressfinished()
            self.progress.setValue(self.progress.maximum())
            self.hideprogressbar_delayed()
        else:
            self.messageBar.pushMessage('Something went wrong! See the message log for more information.', level=Qgis.CRITICAL, duration=10)

    def workerError(self, e, exception_string):
        """ callback for worker thread when failed with error """
        self.progressMessageBar.setText('Worker thread raised an exception: {}'.format(exception_string))
        self.logger.critical('Worker thread raised an exception:\n'.format(exception_string))
        self.hideprogressbar_delayed()

    def mergeshapesasync(self, dbconfig, properties, shapenames):
        """ Do the work in separate worker thread """
        self.progressMessageBar.setText('Merging starts ...')
        worker = Worker(dbconfig, properties, shapenames, self.logger)
        thread = QThread()
        worker.moveToThread(thread)
        worker.finished.connect(self.workerFinished)
        worker.error.connect(self.workerError)
        thread.started.connect(worker.run)
        thread.start()
        self.thread = thread
        self.worker = worker

    def mergeshapes(self, dbconfig, properties, shapenames):
        worker = Worker(dbconfig, properties, shapenames, self.logger)
        return worker.exec_merge_dissolve()

    def get_datasource_uri_for_shapefile(self, config, tablename):
        """ create the datasource needed for reading the shape from db """
        uri = QgsDataSourceUri()
        uri.setConnection(config.get('host'), config.get('port'), config.get('database'), config.get('user'), config.get('password'))
        uri.setDataSource('', tablename, 'geom', "", 'id')
        return uri

    def config(self, filename='database.ini', section='postgresql'):
        return ConfigHelper.config(self, os.path.join(self.plugin_dir, 'properties'), filename, section)

    def exportWorkerFinished(self, ret):
        """ callback for worker thread when finished """
        self.geoJsonExportWorker.deleteLater()
        self.exportWorkerThread.quit()
        self.exportWorkerThread.wait()
        self.exportWorkerThread.deleteLater()
        if ret is not None:
            self.progressMessageBar.setText('Exporting geojson finished')
        else:
            self.messageBar.pushMessage('Something went wrong! See the message log for more information.', level=Qgis.CRITICAL, duration=3)

    def exportWorkerError(self, e, exception_string):
        """ callback for worker thread when failed with error """
        self.progressMessageBar.setText('GeoJsonExporterWorker thread raised an exception: {}'.format(exception_string))
        self.logger.critical('GeoJsonExporterWorker thread raised an exception:\n'.format(exception_string))
        self.hideprogressbar_delayed()

    def shp2geojson(self, inputlayer, geojson_filename):
        """ Export the newly created vectorlayer as geojson """
        self.progressMessageBar.setText('exporting geojson ...')
        geoJsonExportWorker = GeoJsonExportWorker(inputlayer, geojson_filename)
        exportWorkerThread = QThread()
        geoJsonExportWorker.moveToThread(exportWorkerThread)
        geoJsonExportWorker.finished.connect(self.exportWorkerFinished)
        geoJsonExportWorker.error.connect(self.exportWorkerError)
        exportWorkerThread.started.connect(geoJsonExportWorker.run)
        exportWorkerThread.start()
        self.exportWorkerThread = exportWorkerThread
        self.geoJsonExportWorker = geoJsonExportWorker

    def setprogressfinished(self):
        """ Set the progressbar to finished state """
        self.progress.setMinimum(0)
        self.progress.setMaximum(10)
        self.progress.setValue(10)
