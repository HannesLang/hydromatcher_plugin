# -*- coding: utf-8 -*-
"""
/***************************************************************************
 HydrographMatcherDialog
                                 A QGIS plugin
 This plugin searches the best match for a given hydrograph
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-11-16
        git sha              : $Format:%H$
        copyright            : (C) 2018 by MobiliarLab Giub Unibe
        email                : johannes.lang@giub.unibe.ch
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import QtWidgets
from PyQt5 import uic
from PyQt5.QtWidgets import QFileDialog, QDialogButtonBox

from qgis.core import Qgis
from qgis.core import QgsMessageLog

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'hydrograph_matcher_dialog_base.ui'))


class HydrographMatcherDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, iface, generalproperties, parent=None):
        """Constructor."""
        super(HydrographMatcherDialog, self).__init__(parent)
        self.setupUi(self)
        self.iface = iface
        self.generalproperties = generalproperties
        self.pushButton.clicked.connect(self.selectDirectory)
        self.filenames = []
        self.filename = None
        self.geojsonexportfilename = None
        self.button_box.button(QDialogButtonBox.Ok).setEnabled(False)
        self.button_box.button(QDialogButtonBox.Ok).setDefault(True)
        QgsMessageLog.logMessage('property dissolve_merged_shapes: {}'.format(self.generalproperties.getboolean('dissolve_merged_shapes')), level=Qgis.Info)
        QgsMessageLog.logMessage('property merge_async: {}'.format(self.generalproperties.getboolean('merge_async')), level=Qgis.Info)
        self.checkBoxDissolveShapes.setChecked(self.generalproperties.getboolean('dissolve_merged_shapes', True))
        self.checkBoxMergeAsync.setChecked(self.generalproperties.getboolean('merge_async', True))
        self.checkBoxExportGeoJson.setChecked(self.generalproperties.getboolean('export_geojson', False))
        self.pushButtonExportFilename.clicked.connect(self.selectExportFilename)
        self.pushButtonExportFilename.setEnabled(False)
        self.checkBoxExportGeoJson.clicked.connect(self.enableExportFilenameButton)

    def selectDirectory(self):
        dirpath = QFileDialog.getExistingDirectory(self, 'Choose directory containing the forecast hydrographs', os.getenv('HOME'))
        if dirpath:
            self.scandir(dirpath)
        self.button_box.button(QDialogButtonBox.Ok).setFocus()

    def enableExportFilenameButton(self):
        self.pushButtonExportFilename.setEnabled(self.checkBoxExportGeoJson.isChecked())

    def selectExportFilename(self):
        if self.checkBoxExportGeoJson.isChecked():
            filename = QFileDialog.getSaveFileName(self, 'Choose filename for geojson export', os.getenv('HOME'), 'JSON(*.geojson)')
            if filename:
                self.geojsonexportfilename = filename[0]
                self.labelExportFilename.setText(filename[0])

    def scandir(self, dirpath):
        """
        Traverses recursively through dirpath and searches for files with extension *.asc
        Adds all files to self.filenames from which they can be consumed by other modules
        :param dirpath:
        """
        self.lineEdit.setText(dirpath)
        watch_file_extension = self.generalproperties.get('watch_file_extension')
        asc_files = [f for f in os.listdir(dirpath) if f.endswith(watch_file_extension)]
        asc_files_with_path = []
        for file in asc_files:
            asc_files_with_path.append(os.path.join(dirpath, file))

        QgsMessageLog.logMessage('found hydrograph-files: {}'.format(asc_files_with_path), level=Qgis.Info)

        filecount = len(asc_files)
        self.fileCountValueLabel.setText('{}'.format(filecount))

        if filecount > 0:
            self.filenames = asc_files_with_path
            self.button_box.button(QDialogButtonBox.Ok).setEnabled(True)
        else:
            self.filenames = None
            self.button_box.button(QDialogButtonBox.Ok).setEnabled(False)
